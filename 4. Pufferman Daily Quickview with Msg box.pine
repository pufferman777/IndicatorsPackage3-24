// Pufferman's Daily Quickview
// Based on and inspired by u/Civil-cucumber's market quickview indicator. 
// Milestone Version 2. Added trend combination matrix. (this is the message box that tells you what you should do based on the market/stock trend combination.) 
// User should not blindly follow the messages as they are based on a limited number of technical combinations. It's intended to help the user recognize favorable technical patterns.

//@version=5
indicator("PM - Daily Overview", overlay = true, max_bars_back=5000)
// ======= Section I =====
// Overall settings and Foundational References
colorGreen = color.rgb(3, 94, 250)
colorRed = color.rgb(255, 174, 0)
colorYellow = color.rgb(208, 0, 255)
colorGray = color.rgb(161, 161, 162)

// auto ref market (only way to not have series string returned seemingly...)
var usRef = "SPY"
var cryptoRef = "BTCUSD"
var germanRef = "DAX" // "TVC:SXXP"
var defaultRef = "SPX500"
stockPrefix = syminfo.prefix

// Function to check if the current symbol is a market index
isMarketIndex() =>
    syminfo.ticker == "SPY" or syminfo.ticker == "SPX" or syminfo.ticker == "QQQ" or syminfo.ticker == "DIA" or syminfo.ticker == "IWM" or syminfo.ticker == "VIX" or syminfo.ticker == "FTSE" or syminfo.ticker == "DAX" or syminfo.ticker == "CAC" or syminfo.ticker == "STOXX" or syminfo.ticker == "IBEX" or syminfo.ticker == "N225" or syminfo.ticker == "HSI" or syminfo.ticker == "SSEC" or syminfo.ticker == "ASX" or syminfo.ticker == "KOSPI" or syminfo.ticker == "BSESN" or syminfo.ticker == "BVSP" or syminfo.ticker == "TASI" or syminfo.ticker == "JSE" or syminfo.ticker == "MXX" or syminfo.ticker == "GLD" or syminfo.ticker == "SLV" or syminfo.ticker == "USO" or syminfo.ticker == "BTCUSD" or syminfo.ticker == "ETHUSD"

// Function to determine the reference market
getRefMarket() =>
    if str.contains(stockPrefix, "NYSE") or str.contains(stockPrefix, "NASDAQ") or str.contains(stockPrefix, "BATS") or str.contains(stockPrefix, "AMEX")
        usRef
    else if str.contains(stockPrefix, "COIN")
        cryptoRef
    else if str.contains(stockPrefix, "XETR") or str.contains(stockPrefix, "GETTEX") or str.contains(stockPrefix, "TRADEGATE") or str.contains(stockPrefix, "FWB")
        germanRef
    else
        defaultRef

// Determine refMarket based on whether the current ticker is a market index
var refMarket = isMarketIndex() ? syminfo.ticker : getRefMarket()

//retrieve market info
marketOpen = request.security(refMarket, "D", open)
marketHigh = request.security(refMarket, "D", high)
marketLow = request.security(refMarket, "D", low)
marketClose = request.security(refMarket, "D", close)


// ======= II =======
// Table Comparison Section - Stock and Market
//Definitions
//1. 
marketDailyClose = request.security(refMarket, timeframe="D", expression=close, lookahead=barmerge.lookahead_on)
marketYesterdayDailyClose = request.security(refMarket, timeframe="D", expression=close[1], lookahead=barmerge.lookahead_on)
stockDailyClose = request.security(syminfo.tickerid, timeframe="D", expression=close, lookahead=barmerge.lookahead_on)
stockYesterdayDailyClose = request.security(syminfo.tickerid, timeframe="D", expression=close[1], lookahead=barmerge.lookahead_on)
//2. 
marketDailyOpen = request.security(refMarket, timeframe="D", expression=open, lookahead=barmerge.lookahead_on)
stockDailyOpen = request.security(syminfo.tickerid, timeframe="D", expression=open, lookahead=barmerge.lookahead_on)
//3. 
marketvwap = request.security(refMarket, timeframe="D", expression=ta.vwap(hlc3), lookahead=barmerge.lookahead_on)
stockvwap = request.security(syminfo.tickerid, timeframe="D", expression=ta.vwap(hlc3), lookahead=barmerge.lookahead_on)
//4. shared calculate EMAs based on the reference market's close price
// Calculate EMAs for the reference market
marketEma3 = request.security(refMarket, "D", ta.ema(close, 3), lookahead=barmerge.lookahead_on)
marketEma8 = request.security(refMarket, "D", ta.ema(close, 8), lookahead=barmerge.lookahead_on)
// Calculate EMAs for the current symbol
stockEma3 = request.security(syminfo.tickerid, "D", ta.ema(close, 3), lookahead=barmerge.lookahead_on)
stockEma8 = request.security(syminfo.tickerid, "D", ta.ema(close, 8), lookahead=barmerge.lookahead_on)


//5a.
marketout_yesterdayHigh = request.security(refMarket, timeframe="D", expression=high[1], lookahead=barmerge.lookahead_on)
marketout_yesterdayLow = request.security(refMarket, timeframe="D", expression=low[1], lookahead=barmerge.lookahead_on)
stockout_yesterdayHigh = request.security(syminfo.tickerid, timeframe="D", expression=high[1], lookahead=barmerge.lookahead_on)
stockout_yesterdayLow = request.security(syminfo.tickerid, timeframe="D", expression=low[1], lookahead=barmerge.lookahead_on)
//6a. Most recent 2 HA candles
markethaMarketClose = request.security(ticker.heikinashi(refMarket), "D", close, lookahead=barmerge.lookahead_on)
markethaMarketOpen = request.security(ticker.heikinashi(refMarket), "D", open, lookahead=barmerge.lookahead_on)
markethaMarketHigh = request.security(ticker.heikinashi(refMarket), "D", high, lookahead=barmerge.lookahead_on)
markethaMarketLow = request.security(ticker.heikinashi(refMarket), "D", low, lookahead=barmerge.lookahead_on)
marketyHaMarketClose = request.security(ticker.heikinashi(refMarket), "D", close[1], lookahead=barmerge.lookahead_on)
marketyHaMarketOpen = request.security(ticker.heikinashi(refMarket), "D", open[1], lookahead=barmerge.lookahead_on)
marketyHaMarketHigh = request.security(ticker.heikinashi(refMarket), "D", high[1], lookahead=barmerge.lookahead_on)
marketyHaMarketLow = request.security(ticker.heikinashi(refMarket), "D", low[1], lookahead=barmerge.lookahead_on)
stockhaMarketClose = request.security(ticker.heikinashi(syminfo.tickerid), "D", close, lookahead=barmerge.lookahead_on)
stockhaMarketOpen = request.security(ticker.heikinashi(syminfo.tickerid), "D", open, lookahead=barmerge.lookahead_on)
stockhaMarketHigh = request.security(ticker.heikinashi(syminfo.tickerid), "D", high, lookahead=barmerge.lookahead_on)
stockhaMarketLow = request.security(ticker.heikinashi(syminfo.tickerid), "D", low, lookahead=barmerge.lookahead_on)
stockyHaMarketClose = request.security(ticker.heikinashi(syminfo.tickerid), "D", close[1], lookahead=barmerge.lookahead_on)
stockyHaMarketOpen = request.security(ticker.heikinashi(syminfo.tickerid), "D", open[1], lookahead=barmerge.lookahead_on)
stockyHaMarketHigh = request.security(ticker.heikinashi(syminfo.tickerid), "D", high[1], lookahead=barmerge.lookahead_on)
stockyHaMarketLow = request.security(ticker.heikinashi(syminfo.tickerid), "D", low[1], lookahead=barmerge.lookahead_on)

//Logic
// 1. Market Change to yesterday:
marketchangeBullish = marketDailyClose > marketYesterdayDailyClose
marketchangeBearish = marketDailyClose < marketYesterdayDailyClose
// 1b. Stock Change to yesterday:
stockchangeBullish = stockDailyClose > stockYesterdayDailyClose
stockchangeBearish = stockDailyClose < stockYesterdayDailyClose
// 2. Market Change since Open:
marketopenChangeBullish = marketDailyClose > marketDailyOpen
marketopenChangeBearish = marketDailyClose < marketDailyOpen
// 2b. Market Change since Open:
stockopenChangeBullish = stockDailyClose > stockDailyOpen
stockopenChangeBearish = stockDailyClose < stockDailyOpen
// 3. Market VWAP:
marketvwapBullish = marketvwap < marketDailyClose
marketvwapBearish = marketvwap > marketDailyClose
// 3b. Stock VWAP:
stockvwapBullish = stockvwap < stockDailyClose
stockvwapBearish = stockvwap > stockDailyClose

// 4. ===== Vwap MA Stack
// Market Stack conditions
MarketisBullStack = marketDailyClose >= marketvwap and marketvwap >= marketEma3 and marketEma3 >= marketEma8
MarketisBearStack = marketDailyClose <= marketvwap and marketvwap <= marketEma3 and marketEma3 <= marketEma8
// Determine Market stack state
var string MarketstackState = ""
var color MarketstackColor = na
// market stack
if MarketisBullStack
    MarketstackState := "Bull Stack"
    MarketstackColor := colorGreen
else if MarketisBearStack
    MarketstackState := "Bear Stack"
    MarketstackColor := colorRed
else
    MarketstackState := "No Stack"
    MarketstackColor := colorYellow


//4b. Stock Stack conditions based on the reference market
stockisBullStack = stockDailyClose >= stockvwap and stockvwap >= stockEma3 and stockEma3 >= stockEma8
stockisBearStack = stockDailyClose <= stockvwap and stockvwap <= stockEma3 and stockEma3 <= stockEma8
// Determine Stock stack state
var string stockstackState = ""
var color stockstackColor = na
//stock stack
if stockisBullStack
    stockstackState := "Bull Stack"
    stockstackColor := colorGreen
else if stockisBearStack
    stockstackState := "Bear Stack"
    stockstackColor := colorRed
else
    stockstackState := "No Stack"
    stockstackColor := colorYellow


// 5. Market Yesterday's Range - Market:
marketyRangeBullish = marketDailyClose > marketout_yesterdayHigh
marketyRangeBearish = marketDailyClose < marketout_yesterdayLow
// 5b. Stock Yesterday's Range - Market:
stockyRangeBullish = stockDailyClose > stockout_yesterdayHigh
stockyRangeBearish = stockDailyClose < stockout_yesterdayLow

// 6. Two-day HA candles - Market:
markethaBullish = markethaMarketClose > markethaMarketOpen and markethaMarketLow >= markethaMarketOpen and markethaMarketHigh > markethaMarketClose
markethaBearish = markethaMarketClose < markethaMarketOpen and markethaMarketHigh <= markethaMarketOpen and markethaMarketLow < markethaMarketClose
marketyHaBullish = marketyHaMarketClose > marketyHaMarketOpen and marketyHaMarketLow >= marketyHaMarketOpen and marketyHaMarketHigh > marketyHaMarketClose
marketyHaBearish = marketyHaMarketClose < marketyHaMarketOpen and marketyHaMarketHigh <= marketyHaMarketOpen and marketyHaMarketLow < marketyHaMarketClose
markettwoDayHaBullish = markethaBullish and marketyHaBullish
markettwoDayHaBearish = markethaBearish and marketyHaBearish
// 6b. Two-day HA candles - Stock:
stockhaBullish = stockhaMarketClose > stockhaMarketOpen and stockhaMarketLow >= stockhaMarketOpen and stockhaMarketHigh > stockhaMarketClose
stockhaBearish = stockhaMarketClose < stockhaMarketOpen and stockhaMarketHigh <= stockhaMarketOpen and stockhaMarketLow < stockhaMarketClose
stockyHaBullish = stockyHaMarketClose > stockyHaMarketOpen and stockyHaMarketLow >= stockyHaMarketOpen and stockyHaMarketHigh > stockyHaMarketClose
stockyHaBearish = stockyHaMarketClose < stockyHaMarketOpen and stockyHaMarketHigh <= stockyHaMarketOpen and stockyHaMarketLow < stockyHaMarketClose
stocktwoDayHaBullish = stockhaBullish and stockyHaBullish
stocktwoDayHaBearish = stockhaBearish and stockyHaBearish

//=======HA Candle Accel/Deccel
//RS/RW Stack
//Code for determining 


// Count Function 
// ===== 1. Market Tally  
marketbullPoints = 0
marketbearPoints = 0
marketminTrendPoints = 4
if marketchangeBullish
    marketbullPoints := marketbullPoints + 1
else if marketchangeBearish
    marketbearPoints := marketbearPoints + 1
if marketopenChangeBullish
    marketbullPoints := marketbullPoints + 1
else if marketopenChangeBearish
    marketbearPoints := marketbearPoints + 1
if marketvwapBullish
    marketbullPoints := marketbullPoints + 1
else if marketvwapBearish
    marketbearPoints := marketbearPoints + 1
if MarketisBullStack
    marketbullPoints := marketbullPoints + 1
else if MarketisBearStack
    marketbearPoints := marketbearPoints + 1
if marketyRangeBullish
    marketbullPoints := marketbullPoints + 1
else if marketyRangeBearish
    marketbearPoints := marketbearPoints + 1
if markettwoDayHaBullish
    marketbullPoints := marketbullPoints + 1
else if markettwoDayHaBearish
    marketbearPoints := marketbearPoints + 1
markettotalBullish = marketbullPoints >= marketminTrendPoints
markettotalBearish = marketbearPoints >= marketminTrendPoints
marketcellBgColor = markettotalBullish ? colorGreen : markettotalBearish ? colorRed : colorYellow

//1b. Stock Tally
stockbullPoints = 0
stockbearPoints = 0
stockminTrendPoints = 4
if stockchangeBullish
    stockbullPoints := stockbullPoints + 1
else if stockchangeBearish
    stockbearPoints := stockbearPoints + 1
if stockopenChangeBullish
    stockbullPoints := stockbullPoints + 1
else if stockopenChangeBearish
    stockbearPoints := stockbearPoints + 1
if stockvwapBullish
    stockbullPoints := stockbullPoints + 1
else if stockvwapBearish
    stockbearPoints := stockbearPoints + 1
if stockisBullStack
    stockbullPoints := stockbullPoints + 1
else if stockisBearStack
    stockbearPoints := stockbearPoints + 1
if stockyRangeBullish
    stockbullPoints := stockbullPoints + 1
else if stockyRangeBearish
    stockbearPoints := stockbearPoints + 1
if stocktwoDayHaBullish
    stockbullPoints := stockbullPoints + 1
else if stocktwoDayHaBearish
    stockbearPoints := stockbearPoints + 1
stocktotalBullish = stockbullPoints >= stockminTrendPoints
stocktotalBearish = stockbearPoints >= stockminTrendPoints
stockcellBgColor = stocktotalBullish ? colorGreen : stocktotalBearish ? colorRed : colorYellow

//==== IV. master tables
// Input for Main Table Position Settings
tablePositionOption = input.string("bottom left", title="Main Table Position", options=["top left", "top middle", "top right", "middle left", "middle center", "middle right", "bottom left", "bottom middle", "bottom right"])
tablePosition = switch tablePositionOption
    "top left" => position.top_left
    "top middle" => position.top_center
    "top right" => position.top_right
    "middle left" => position.middle_left
    "middle center" => position.middle_center
    "middle right" => position.middle_right
    "bottom left" => position.bottom_left
    "bottom middle" => position.bottom_center
    "bottom right" => position.bottom_right
// Create the main table
var overviewId = table.new(tablePosition, columns=2, rows=10)

//Market Column
fillTableColumn(col) =>
    if col == 1
        // Market data calculation for reference market
        table.cell(overviewId, column=1, row=0, text=refMarket, bgcolor=color.rgb(152, 153, 156), text_size=size.small)
        table.cell(overviewId, column=1, row=1, text=markettotalBullish ? "BULLISH" : markettotalBearish ? "BEARISH" : "CHOPPY\nSet alerts", text_color=color.white, bgcolor=marketcellBgColor, text_size=size.small)        
		table.cell(overviewId, column=1, row=2, text="Change\nsince\nYesterday", text_color=color.white, bgcolor=marketchangeBullish ? colorGreen : marketchangeBearish ? colorRed : colorYellow, text_size=size.small)
        table.cell(overviewId, column=1, row=3, text="Change\nsince\nOpen", text_color=color.white, bgcolor=marketopenChangeBullish ? colorGreen : marketopenChangeBearish ? colorRed : colorYellow, text_size=size.small)
		table.cell(overviewId, column=1, row=4, text="VWAP\n" + str.tostring(math.round(marketvwap)), text_color=color.white, bgcolor=marketvwapBullish ? colorGreen : marketvwapBearish ? colorRed : colorYellow, text_size=size.small)
	    table.cell(overviewId, column=1, row=5, text=MarketstackState, text_color=color.white, bgcolor=MarketstackColor, text_size=size.small)
    	table.cell(overviewId, column=1, row=6, text=marketyRangeBullish ? "Broke\nYHigh" : marketyRangeBearish ? "Broke\nYLow" : "Within\nYRange", text_color=color.white, bgcolor=marketyRangeBullish ? colorGreen : marketyRangeBearish ? colorRed : colorYellow, text_size=size.small)
		table.cell(overviewId, column=1, row=7, text="Last 2 HA\ncandles", text_color=color.white, bgcolor=markettwoDayHaBullish ? colorGreen : markettwoDayHaBearish ? colorRed : colorYellow, text_size=size.small)
    //  place holder for HA acceleration/deceleration     
    //  RS/RW Stack
 //Stock Column
	if col == 0
        stockDataClose = close
        table.cell(overviewId, column=0, row=0, text="DAILY", bgcolor=color.rgb(148, 150, 155), text_size=size.small)
        table.cell(overviewId, column=0, row=1, text=stocktotalBullish ? "BULLISH" : stocktotalBearish ? "BEARISH" : "CHOPPY\nSet alerts", text_color=color.white, bgcolor=stockcellBgColor, text_size=size.small)
        table.cell(overviewId, column=0, row=2, text="Change\nsince\nYesterday", text_color=color.white, bgcolor=stockchangeBullish ? colorGreen : stockchangeBearish ? colorRed : colorYellow, text_size=size.small)
        table.cell(overviewId, column=0, row=3, text="Change\nsince\nOpen", text_color=color.white, bgcolor=stockopenChangeBullish ? colorGreen : stockopenChangeBearish ? colorRed : colorYellow, text_size=size.small)
		table.cell(overviewId, column=0, row=4, text="VWAP\n" + str.tostring(math.round(stockvwap)), text_color=color.white, bgcolor=stockvwapBullish ? colorGreen : stockvwapBearish ? colorRed : colorYellow, text_size=size.small)
	    table.cell(overviewId, column=0, row=5, text=stockstackState, text_color=color.white, bgcolor=stockstackColor, text_size=size.small)
		table.cell(overviewId, column=0, row=6, text=stockyRangeBullish ? "Broke\nYHigh" : stockyRangeBearish ? "Broke\nYLow" : "Within\nYRange", text_color=color.white, bgcolor=stockyRangeBullish ? colorGreen : stockyRangeBearish ? colorRed : colorYellow, text_size=size.small)
		table.cell(overviewId, column=0, row=7, text="Last 2 HA\ncandles", text_color=color.white, bgcolor=stocktwoDayHaBullish ? colorGreen : stocktwoDayHaBearish ? colorRed : colorYellow, text_size=size.small)  
          //  place holder for HA acceleration/deceleration 
    //  RS/RW Stack



//========================
// wide table - Define market and stock trend combinations
// Function to determine trend category (up, chop, down)
trendCategory(isBullish, isBearish) =>
    if isBullish
        "up"
    else if isBearish
        "down"
    else
        "chop"

// Determine market and stock categories
marketTrend = trendCategory(markettotalBullish, markettotalBearish)
stockTrend = trendCategory(stocktotalBullish, stocktotalBearish)

// Define background colors for different conditions
var color matrixBgColor = color.new(color.white, 0) // Default color

// define bg color
if marketTrend == "up" and stockTrend == "up"
    matrixBgColor := color.blue
else if marketTrend == "up" and stockTrend == "chop"
    matrixBgColor := color.rgb(245, 104, 104)
else if marketTrend == "up" and stockTrend == "down"
    matrixBgColor := color.new(#ff9900, 0)
else if marketTrend == "chop" and stockTrend == "up"
    matrixBgColor := color.new(#00bbd4, 0)
else if marketTrend == "chop" and stockTrend == "chop"
    matrixBgColor := color.rgb(255, 64, 0)
else if marketTrend == "chop" and stockTrend == "down"
    matrixBgColor := color.new(#00bbd4, 0)
else if marketTrend == "down" and stockTrend == "up"
    matrixBgColor := color.new(#ff9900, 0)
else if marketTrend == "down" and stockTrend == "chop"
    matrixBgColor := color.rgb(245, 104, 104)
else if marketTrend == "down" and stockTrend == "down"
    matrixBgColor := color.blue

//Define Message with line break
message = ""
if marketTrend == "up" and stockTrend == "up"
    message := "RISK ON, ideally the conditions\n don't even require hedging.\n Add to winners."
else if marketTrend == "up" and stockTrend == "chop"
    message := "Don't trade this stock, however\n the market is up, so find RS stocks\n and enter those."
else if marketTrend == "up" and stockTrend == "down"
    message := "Don't trade this stock.\n Also don't short."
else if marketTrend == "chop" and stockTrend == "up"
    message := "Don't trade, unless stock has\n really clear trend, then enter with\n the stock when the market is chopping\nto the direction of the stock."
else if marketTrend == "chop" and stockTrend == "chop"
    message := "Don't trade. Unless stock is a\n blue chip stock, you may sell puts\n at opportune times."
else if marketTrend == "chop" and stockTrend == "down"
    message := "Don't trade unless stock has\n really clear trend, then enter the stock\n when market is chopping back down.\n Take profits, don't add."
else if marketTrend == "down" and stockTrend == "up"
    message := "Don't trade, but mark the stock.\n It has RS."
else if marketTrend == "down" and stockTrend == "chop"
    message := "Don't trade anything. If you have\n shares, you may sell covered calls."
else if marketTrend == "down" and stockTrend == "down"
    message := "RISK ON, ideally the conditions\n don't even require hedging, add to\n winners (but be careful, shorting\n isn't the same as longing)."
else
    message := "Condition not recognized."

// Input for Wide Table Position Settings
widetablePositionOption = input.string("middle left", title="Wide Table Position", options=["top left", "top middle", "top right", "middle left", "middle center", "middle right", "bottom left", "bottom middle", "bottom right"])
widetablePosition = switch widetablePositionOption
    "top left" => position.top_left
    "top middle" => position.top_center
    "top right" => position.top_right
    "middle left" => position.middle_left
    "middle center" => position.middle_center
    "middle right" => position.middle_right
    "bottom left" => position.bottom_left
    "bottom middle" => position.bottom_center
    "bottom right" => position.bottom_right

// Create the wide table
var wideTableId = table.new(widetablePosition, columns=1, rows=1)
table.cell(wideTableId, column=0, row=0, text=message, text_color=color.white, bgcolor=matrixBgColor, text_size=size.normal)

// Decide which columns to fill based on whether the current symbol is likely a market index
if isMarketIndex()
    fillTableColumn(1) // Fill only Market column if it's a market index
else
    fillTableColumn(0) // Fill Stock column if it's not a market index
    fillTableColumn(1) // Fill Market column regardless


